// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @unique @default(uuid())
  email          String         @unique
  password       String
  firstName      String
  lastName       String
  phoneNo        Int?
  role           userRole       @default(CUSTOMER)
  addresses      Address[]
  carts          Cart[]
  orders         Order[]
  appliedOffers  UserOffer[] // Track which offers user has used
  eligibleOffers EligibleUser[] // Offers specifically assigned to this user
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum userRole {
  CUSTOMER
  ADMIN
  VENDOR
}

model Category {
  id          Int               @id @unique @default(autoincrement())
  name        String            @unique
  description String?
  offer       Offer[]
  products    ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Product {
  id          String            @id @unique @default(uuid())
  name        String 
  description String?
  images      ProductImage[]
  price       Float
  stock       Int
  categories  ProductCategory[]
  colors      ProductColor[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  offers      Offer[] // Add this line for many-to-many relation with Offer
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductCategory {
  id         String   @id @unique @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([productId, categoryId])
}

model ProductImage {
  id        String   @id @unique @default(uuid())
  imageUrl  String
  publicId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id         String         @id @unique @default(uuid())
  name       String         @unique
  hexCode    String         @unique
  products   ProductColor[]
  cartItems  CartItem[] // Add this relation
  orderItems OrderItem[] // Add this relation
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model ProductColor {
  id        String   @id @unique @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([productId, colorId])
}

model Address {
  id        String   @id @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  street    String
  zipCode   String
  city      String
  country   String
  label     String?
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Order     Order[]
}

model Cart {
  id             String     @id @unique @default(uuid())
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  cartItems      CartItem[]
  appliedOffer   Offer?     @relation(fields: [offerId], references: [id])
  offerId        String?
  discountAmount Float? // Stores the calculated discount amount
  isOrdered      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  order          Order? // One-to-one relation with Order imp to know 
}

model CartItem {
  id        String   @id @unique @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  colorId   String?
  color     Color?   @relation(fields: [colorId], references: [id], onDelete: SetNull)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, colorId]) //very important for using cartId_productId_colorId like this things 
  @@unique([cartId, productId]) //same to here
}

model Order {
  id             String      @id @unique @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  cart           Cart        @relation(fields: [cartId], references: [id])
  cartId         String      @unique
  appliedOffer   Offer?      @relation(fields: [offerId], references: [id])
  offerId        String?
  discountAmount Float? // Stores the final discount amount
  addressId      String?
  address        Address?    @relation(fields: [addressId], references: [id])
  totalAmount    Float
  finalAmount    Float // Total after discount
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  orderItems     OrderItem[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELLED
  REFUNDED
}

/// MODEL: OrderItem
/// Stores a snapshot of the product data (e.g., price) at the time of order placement.
model OrderItem {
  id        String   @id @unique @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  colorId   String?
  color     Color?   @relation(fields: [colorId], references: [id], onDelete: SetNull)
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
}

model Offer {
  id             String          @id @unique @default(uuid())
  code           String          @unique
  title          String
  description    String?
  discountValue  Int
  discountType   DiscountType
  minOrder       Float? // Minimum order amount required
  maxDiscount    Float? // Maximum discount amount allowed
  startDate      DateTime
  endDate        DateTime
  useCount       Int             @default(0)
  usageLimit     Int? // Maximum number of times offer can be used
  status         OfferStatus     @default(ACTIVE)
  products       Product[] // This now has its opposite relation in Product model
  categories     Category[] // Categories this offer applies to (optional)
  appliedCarts   Cart[] // Carts where this offer is applied
  usedInOrders   Order[] // Orders where this offer was used
  visibility     OfferVisibility @default(PUBLIC) // Control who can see this offer
  appliedByUsers UserOffer[] // Track which users used this offer
  eligibleUsers  EligibleUser[] // Users who can use this private offer
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([code])
  @@index([status])
}

enum OfferStatus {
  ACTIVE
  DRAFT
  EXPIRED
  ARCHIVED
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

enum OfferVisibility {
  PUBLIC // Available to all users
  PRIVATE // Available only to specific users
  ROLE_BASED // Available based on user role
}

model UserOffer {
  id      String   @id @unique @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  offer   Offer    @relation(fields: [offerId], references: [id])
  offerId String
  usedAt  DateTime @default(now())
  orderId String? // Optional reference to order where offer was used

  @@unique([userId, offerId])
}

model EligibleUser {
  id        String    @id @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer     @relation(fields: [offerId], references: [id])
  offerId   String
  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)

  @@unique([userId, offerId])
}

