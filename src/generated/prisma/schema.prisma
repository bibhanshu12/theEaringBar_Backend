// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  phoneNo   Int?
  role      userRole  @default(CUSTOMER)
  addresses Address[]
  carts     Cart[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum userRole {
  CUSTOMER
  ADMIN
  VENDOR
}

model Category {
  id          Int       @id @unique @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String      @id @unique @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  Category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Address {
  id        String   @id @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  street    String
  zipCode   String
  city      String
  country   String
  label     String?
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Cart {
  id        String     @id @unique @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  isOrdered Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Order? // One-to-one relation with Order
}

model CartItem {
  id        String   @id @unique @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @unique @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  cart        Cart        @relation(fields: [cartId], references: [id])
  cartId      String      @unique
  addressId   String? // Make this unique for one-to-one relation
  address     Address?    @relation(fields: [addressId], references: [id])
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

/// Enum representing order statuses.
enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELLED
  REFUNDED
}

/// MODEL: OrderItem
/// Stores a snapshot of the product data (e.g., price) at the time of order placement.
model OrderItem {
  id        String   @id @unique @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Float // Price per unit at time of purchase
  createdAt DateTime @default(now())
}
